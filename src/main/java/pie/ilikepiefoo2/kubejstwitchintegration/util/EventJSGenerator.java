package pie.ilikepiefoo2.kubejstwitchintegration.util;

import net.minecraftforge.eventbus.api.Event;
import javassist.Modifier;
import org.reflections.Reflections;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Set;

/**
 * @author ILIKEPIEFOO2
 *
 * I am fully away of how horribly written this class is so ignore it,
 * This is just meant to speed up a few hours of work dynamically.
 */
public class EventJSGenerator {
    public static void main( String[] args )
    {
        Reflections reflections = new Reflections("pie.ilikepiefoo2.twitchintegration.events.autogenerated");
        Set<Class<? extends Event>> classes = reflections.getSubTypesOf(net.minecraftforge.eventbus.api.Event.class);
        System.out.println(classes.size());
//        classes.stream().forEach( subject ->{
//            generateFEFile(subject);
//            stringifyEventHandlerHook(subject);
//        });
        classes.stream().map( EventJSGenerator::generateEventJSField ).distinct().sorted().forEachOrdered(System.out::println);
        classes.stream().map( EventJSGenerator::generateExampleJS ).distinct().sorted().forEachOrdered(System.out::println);
    }

    private static String getSimpleName(Class<?> subject)
    {
        return subject.getSimpleName().substring(0,subject.getSimpleName().length()-2);
    }

    private static void generateFEFile(Class<? extends Event> subject)
    {
        if(Modifier.isPublic(subject.getModifiers())) {
            try {
                saveToFile("src/main/java/pie/ilikepiefoo2/kubejstwitchintegration/events/autogenerated/" + subject.getPackage().getName().replace(".", "/").substring(76) + "/" + getSimpleName(subject) + "JS.java", toJavaFile(subject));
            } catch (IOException e) {
                System.out.println(e);
                e.printStackTrace();
            }
        }
    }
    private static String generateExampleJS( Class<? extends Event> subject )
    {
        if(Modifier.isPublic(subject.getModifiers())){
            String id = toKubeJSEventID(subject);
            return String.format(
                    "onEvent('%s', event => {\n    console.info(`%s Event = ${event}`);\n});",
                    id,
                    id
            );
        }
        return "\n";
    }
    private static String generateEventJSField( Class<? extends Event> subject )
    {
        if(Modifier.isPublic(subject.getModifiers())) {
            String id = toKubeJSEventID(subject);
            return String.format(
                    "public static final String %-50s = \"%s\";",
                    id.replace(".","_").toUpperCase(),
                    id
            );
        }
        return "\n";
    }
    private static String stringifyEventHandlerHook( Class<? extends Event> subject)
    {
        if(Modifier.isPublic(subject.getModifiers())) {
            //MinecraftForge.EVENT_BUS.addListener(EventPriority.HIGHEST, event -> {}, true, Class.class);
            String temp = subject.getName().substring(76);
            temp = temp.substring(0,temp.lastIndexOf('.')+1);
            temp += getSimpleName(subject);
            return (
                    String.format("MinecraftForge.EVENT_BUS.addListener(EventPriority.NORMAL, false,  %s.class, event -> { new %s%sJS(event).postCommon(%s);});",
                            subject.getName(),
                            "pie.ilikepiefoo2.kubejstwitchintegration.events.autogenerated.",
                            temp,
                            toKubeJSEventID(subject).replace(".","_").toUpperCase()
                    )
            );
        }
        return "\n";
    }

    private static String toKubeJSEventID(Class<?> subject)
    {
        String temp = subject.getName().substring(76);
        temp = temp.substring(0,temp.lastIndexOf('.')+1);
        temp += getSimpleName(subject);
        temp = temp.replaceFirst("(events\\.)|(event\\.)","").replaceAll("([A-Z])", "_$1").toLowerCase().replaceFirst("_","").replace("_",".").replace(".event","");
        return temp;
    }

    private static void saveToFile(String path, String content) throws IOException
    {
        File file = new File(path).getAbsoluteFile();

        file.getParentFile().mkdirs();
        BufferedWriter writer = null;
        writer = new BufferedWriter(new FileWriter(file));
        writer.write(content);
        writer.close();
    }

    private static <T extends Event> String toJavaFile(Class<T> subject)
    {
        StringBuilder builder = new StringBuilder();
        String newClassName = getSimpleName(subject)+"JS";
        // Package
        builder.append("package pie.ilikepiefoo2.kubejstwitchintegration.events.autogenerated.");
        builder.append(subject.getPackage().getName().substring(76));
        builder.append(";\n\n\n");

        // Class
        builder.append("public class ");
        builder.append(newClassName);
        builder.append(" extends pie.ilikepiefoo2.kubejstwitchintegration.util.CommonEventJS {\n");
        // Event field
        builder.append("    public final ");
        builder.append(subject.getName());
        builder.append(" event;\n\n");
        // Constructor
        builder.append("    public ");
        builder.append(newClassName);
        builder.append("( ");
        builder.append(subject.getName());
        builder.append(" event )\n    {\n        this.event = event;\n    }\n\n");

        // Methods
        for(Method method : subject.getMethods()){
            appendMethod(builder, method);
        }

        // Closing Bracket
        builder.append("\n}\n");
        return builder.toString();
    }

    private static void appendMethod( StringBuilder builder, Method method)
    {
        if(Modifier.isPublic(method.getModifiers()) && !method.getDeclaringClass().equals(Object.class) && !Modifier.isVolatile(method.getModifiers())) {
            StringBuilder paramBuilder = new StringBuilder("");
            builder.append("    ");
            builder.append(Modifier.toString(method.getModifiers()));
            builder.append(" ");
            builder.append(method.getReturnType().getName().replace("$","."));
            builder.append(" ");
            builder.append(method.getName());
            builder.append("( ");
            Parameter parameter;
            Parameter[] parameters = method.getParameters();
            for(int i=0; i<method.getParameterCount(); i++){
                parameter = parameters[i];
                builder.append(parameter.getType().getName().replace("$","."));
                builder.append(" ");
                paramBuilder.append("arg");
                paramBuilder.append(i);
                builder.append("arg");
                builder.append(i);
                if(i!=method.getParameterCount()-1) {
                    builder.append(",");
                    paramBuilder.append(",");
                }
                builder.append(" ");
            }
            builder.append(") // Declaring Class: ");
            builder.append(method.getDeclaringClass().getName());
            builder.append("\n    {\n        ");
            if(!method.getReturnType().equals(Void.TYPE)){
                builder.append("return ");
            }
            builder.append("this.event.");
            builder.append(method.getName());
            builder.append("( ");
            builder.append(paramBuilder);
            builder.append(" );");
            builder.append("\n    }\n");

        }
    }
}
